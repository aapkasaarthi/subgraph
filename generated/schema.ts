// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CampaignHistoryItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CampaignHistoryItem entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CampaignHistoryItem entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CampaignHistoryItem", id.toString(), this);
  }

  static load(id: string): CampaignHistoryItem | null {
    return store.get("CampaignHistoryItem", id) as CampaignHistoryItem | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaignData(): string {
    let value = this.get("campaignData");
    return value.toString();
  }

  set campaignData(value: string) {
    this.set("campaignData", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get donationCount(): BigInt {
    let value = this.get("donationCount");
    return value.toBigInt();
  }

  set donationCount(value: BigInt) {
    this.set("donationCount", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get donatorAddresses(): Array<Bytes> {
    let value = this.get("donatorAddresses");
    return value.toBytesArray();
  }

  set donatorAddresses(value: Array<Bytes>) {
    this.set("donatorAddresses", Value.fromBytesArray(value));
  }
}

export class Campaign extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Campaign entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Campaign entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Campaign", id.toString(), this);
  }

  static load(id: string): Campaign | null {
    return store.get("Campaign", id) as Campaign | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get campaigner(): Bytes {
    let value = this.get("campaigner");
    return value.toBytes();
  }

  set campaigner(value: Bytes) {
    this.set("campaigner", Value.fromBytes(value));
  }

  get campaignCount(): BigInt {
    let value = this.get("campaignCount");
    return value.toBigInt();
  }

  set campaignCount(value: BigInt) {
    this.set("campaignCount", Value.fromBigInt(value));
  }

  get campaignEnabled(): boolean {
    let value = this.get("campaignEnabled");
    return value.toBoolean();
  }

  set campaignEnabled(value: boolean) {
    this.set("campaignEnabled", Value.fromBoolean(value));
  }

  get donationCount(): BigInt {
    let value = this.get("donationCount");
    return value.toBigInt();
  }

  set donationCount(value: BigInt) {
    this.set("donationCount", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get campaignHistory(): Array<string> {
    let value = this.get("campaignHistory");
    return value.toStringArray();
  }

  set campaignHistory(value: Array<string>) {
    this.set("campaignHistory", Value.fromStringArray(value));
  }
}
